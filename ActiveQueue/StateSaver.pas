unit StateSaver;

interface

uses
  JsonableInterface;

type
  /// A class that saves given state in a file.
  TStateSaver = class
  strict private
  const
    Format = '-YYYY-mm-dd_hh_nn_ss';

  var
    /// <summary>Find an available name for a file in the folder which the path referes to.
    /// If no file under given path exists, that path is returned. If there exists a file,
    /// then a new name is generated by prepending a timestamp to the given name.
    /// </summary>
    /// <param name="Path">Suggested path. If there exists a file, a new path is to generated. </param>
    /// <param name="Format">format of the current timestamp to be prepended to the fila name </param>
    function GetAvailablePath(const Path: String; const Format: String): String;

  public

    procedure Save(const FilePath: String; const Obj: Jsonable);

  end;

implementation

uses
  System.IOUtils, System.SysUtils;

{ TStateSaver }

function TStateSaver.GetAvailablePath(const Path, Format: String): String;
var
  TryName: String;
  folder, nameExt, name, ext: String;
begin
  TryName := path;
  while TFile.Exists(TryName) do
  begin
    Folder := ExtractFilePath(TryName);
    Ext := ExtractFileExt(TryName);
    NameExt := ExtractFileName(TryName);
    Name := Copy(NameExt, 1, Length(NameExt) - Length(Ext));
    TryName := Folder + Name + formatdatetime(Format, Now()) + Ext;
  end;
  Result := TryName;
end;

procedure TStateSaver.Save(const FilePath: String; const Obj: Jsonable);
var
  OutFileName: String;
begin
  OutFileName := GetAvailablePath(FilePath, Format);
  TFile.AppendAllText(OutFileName, Obj.ToJson().ToString());
end;

end.
